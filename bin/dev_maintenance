#!/bin/bash
# vim: set syntax=sh:
set -e

# Script runs periodically to make sure my dev environment is up to date

update_repo () {
  pushd "$HOME/$repo" > /dev/null
  echo "Updating repo $repo"
  
  # we can only ever have uncommitted changes on the current bookmark
  must_unshelve=""
  hg book -f "_devmaint"
  if hg shelve; then
    must_unshelve="_devmaint"
    echo "$must_unshelve had uncommitted changes, shelving them"
  fi

  echo "Updating master"
  hg up "master"
  arc pull
  
  # cleanup to avoid arc pull on unnecessary bookmarks
  echo "y" | arc feature --cleanup
 
  # make sure that the bookmark still exists
  hg book -f "_devmaint" 

  heads=$(hg heads --template "{node} {author} {desc|firstline}\n" | grep "vmagro@fb.com" | cut -d' ' -f1)
  # find all the base revisions at once so they can be sorted and duplicates removed
  bases=$(echo "$heads" | xargs -I% hg log --template "{node}\n" --rev 'first(::% & draft())')
  # remove duplicates so that we only rebase each stack once
  bases=$(echo "$bases" | sort --unique)
  for base in $bases; do
    echo updating "$(hg log --template "{desc|firstline}\n" --rev "$base")"
    dest="master"
    if [ "$repo" = "fbcode" ]; then
      dest="remote/fbcode/warm"
    fi
    # do the rebase, abort on failure so we still move the rest of the heads forward
    hg rebase --source "$base" --dest "$dest" || hg rebase --abort
    if [ "$repo" = "configerator" ]; then
      # try to rebuild, but don't blow up if it fails
      (arc build && hg amend --rebase) || hg revert --all
    fi
  done

  hg purge

  if [[ -n "$must_unshelve" ]]; then
    echo "Unshelving changes made to $must_unshelve"
    hg up "$must_unshelve"
    hg unshelve
  fi

  echo "Returning to _devmaint / master"
  hg up "_devmaint" || hg up master
  hg book -d "_devmaint" || true



  if [ "$repo" = "fbcode" ]; then
    # make sure all the caches are warmed up
    buck build //kernel/kerneltest/... //kernel/klownfish/... || true
  fi
  
  if [ "$repo" = "opsfiles" ]; then
    # make sure we upload new chef cookbooks to taste-tester so it's fast
    echo Uploading chef cookbooks to taste-tester
    taste-tester upload
  fi

  popd > /dev/null
}

for repo in "$@"; do
  update_repo "$repo"
done
